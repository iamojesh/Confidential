#include<stdio.h>
 #include<stdlib.h>
  #define MAX 50
#define INF 9999


int main() {
int n, src, dest, i, j;
int dist[MAX][MAX], cost[MAX], visited[MAX], parent[MAX];


printf("Enter the number of nodes: "); scanf("%d", &n);

printf("Enter the distance matrix (if no connection, enter-1):\n"); for(i = 0; i < n; i++) {
for(j = 0; j < n; j++) { if(i == j) {
dist[i][j] = 0; continue;
}
if(j < i) {
dist[i][j] = dist[j][i]; continue;
}
printf("dist[%d][%d]: ", i, j);
scanf("%d", &dist[i][j]);
if(dist[i][j] ==-1) { dist[i][j] = INF;
}
}
}



printf("\nEnter the source node (0 to %d): ", n- 1); scanf("%d", &src);
printf("Enter the destination node (0 to %d): ", n- 1); scanf("%d", &dest);

for(i = 0; i < n; i++) { cost[i] = INF; visited[i] = 0;
parent[i] =-1;

}


cost[src] = 0;


for(i = 0; i < n; i++) {
int min = INF, min_index =-1;


for(j = 0; j < n; j++) {
if(!visited[j] && cost[j] < min) { min = cost[j];
min_index = j;

}
}



if(min_index ==-1) { break;
}


visited[min_index] = 1;


for(j = 0; j < n; j++) {
if(!visited[j] && dist[min_index][j] != INF) { if(cost[min_index] + dist[min_index][j] < cost[j]) {
cost[j] = cost[min_index] + dist[min_index][j]; parent[j] = min_index;
}
}
}
}



int path[MAX], p = 0;
int temp = dest;


printf("\nThe shortest path: "); if(cost[dest] == INF) {
printf("No path exists between source and destination.\n");
} else {
while(temp !=-1) {
path[p++] = temp; temp = parent[temp];
}
for(i = p- 1; i >= 0; i--) {
printf("%d ", path[i]);

}
printf("\nTotal cost: %d\n", cost[dest]);
}



return 0;
}
